@app.route('/')
def root():
    if current_user.is_authenticated:
        return redirect(url_for('profile'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and user.check_password(request.form['password']):
            login_user(user)
            return redirect(url_for('profile'))
        flash('Invalid username or password')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        user = User(
            username=request.form['username'],
            email=request.form['email']
        )
        user.set_password(request.form['password'])
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/dashboard')
@login_required
def dashboard():
    folders = Folder.query.filter_by(user_id=current_user.id).all()
    recent_workouts = Workout.query.filter_by(user_id=current_user.id).order_by(Workout.date.desc()).limit(5).all()
    return render_template('dashboard.html', folders=folders, recent_workouts=recent_workouts)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/folder/<int:folder_id>')
@login_required
def view_folder(folder_id):
    folder = Folder.query.get_or_404(folder_id)
    if folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))
    return render_template('folder.html', folder=folder)

@app.route('/folder/create', methods=['POST'])
@login_required
def create_folder():
    folder = Folder(
        name=request.form['name'],
        user_id=current_user.id
    )
    db.session.add(folder)
    db.session.commit()
    flash('Folder created successfully', 'success')
    return redirect(url_for('dashboard'))

@app.route('/template/create/<int:folder_id>', methods=['GET', 'POST'])
@login_required
def create_template(folder_id):
    folder = Folder.query.get_or_404(folder_id)
    if folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        try:
            template_name = request.form.get('name')
            if not template_name:
                flash('Template name is required', 'error')
                return redirect(url_for('view_folder', folder_id=folder_id))

            template = WorkoutTemplate(
                name=template_name,
                folder_id=folder_id
            )
            db.session.add(template)
            db.session.commit()
            flash('Template created successfully', 'success')
            return redirect(url_for('view_folder', folder_id=folder_id))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating template: {str(e)}', 'error')
            return redirect(url_for('view_folder', folder_id=folder_id))
    else:
        return redirect(url_for('view_folder', folder_id=folder_id))

@app.route('/template/<int:template_id>/edit')
@login_required
def edit_template(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))
    exercises = Exercise.query.order_by(Exercise.category, Exercise.name).all()
    return render_template('edit_template.html', template=template, exercises=exercises)

@app.route('/template/exercise/add/<int:template_id>', methods=['POST'])
@login_required
def add_template_exercise(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    exercise_id = request.form.get('exercise_id')
    sets = request.form.get('sets')
    reps = request.form.get('reps')
    weight = request.form.get('weight')
    rpe = request.form.get('rpe')
    rir = request.form.get('rir')
    notes = request.form.get('notes')

    if reps == '':
        reps = None

    if weight == '':
        weight = None
    else:
        weight = float(weight) if weight else None

    if rpe == '':
        rpe = None
    else:
        rpe = float(rpe) if rpe else None

    if rir == '':
        rir = None
    else:
        rir = int(rir) if rir else None

    sets = int(sets)

    exercise = TemplateExercise(
        template_id=template_id,
        exercise_id=int(exercise_id),
        sets=sets,
        reps=reps,
        weight=weight,
        rpe=rpe,
        rir=rir,
        notes=notes
    )

    db.session.add(exercise)
    db.session.commit()
    flash('Exercise added to template', 'success')
    return redirect(url_for('edit_template', template_id=template_id))

@app.route('/template/exercise/delete/<int:template_id>/<int:exercise_id>', methods=['POST'])
@login_required
def delete_template_exercise(template_id, exercise_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    exercise = TemplateExercise.query.get_or_404(exercise_id)
    db.session.delete(exercise)
    db.session.commit()
    flash('Exercise removed from template', 'success')
    return redirect(url_for('edit_template', template_id=template_id))

@app.route('/template/<int:template_id>/start', methods=['POST', 'GET'])
@login_required
def start_workout(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        flash("You don't have access to this template.", 'error')
        return redirect(url_for('dashboard'))

    # Create a new workout from the template
    new_workout = Workout(
        user_id=current_user.id,
        template_id=template_id,
        date=datetime.utcnow(),
        name=template.name,
        notes=None
    )
    db.session.add(new_workout)
    db.session.commit()

    # Create WorkoutSet entries from the template exercises
    for ex in template.exercises:
        for i in range(ex.sets):
            new_set = WorkoutSet(
                workout_id=new_workout.id,
                exercise_id=ex.exercise_id,
                weight=ex.weight,
                rpe=ex.rpe,
                rir=ex.rir,
                notes=f"Suggested: {ex.reps}" if ex.reps else None,
                completed=False
            )
            db.session.add(new_set)

    db.session.commit()

    flash('Workout started from template!', 'success')
    return redirect(url_for('view_workout', workout_id=new_workout.id))

@app.route('/workout/<int:workout_id>')
@login_required
def view_workout(workout_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    return render_template('view_workout.html', workout=workout)

@app.route('/workout/<int:workout_id>/set/<int:set_id>/update', methods=['POST'])
@login_required
def update_set(workout_id, set_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    w_set = WorkoutSet.query.get_or_404(set_id)
    if w_set.workout_id != workout_id:
        flash("Invalid set for this workout.", 'error')
        return redirect(url_for('view_workout', workout_id=workout_id))

    weight = request.form.get('weight')
    reps = request.form.get('reps')
    rpe = request.form.get('rpe')
    rir = request.form.get('rir')

    if weight == '':
        weight = None
    else:
        weight = float(weight) if weight else None

    if reps == '' or reps is None:
        reps = 0
    else:
        reps = int(reps)

    if rpe == '':
        rpe = None
    else:
        rpe = float(rpe) if rpe else None

    if rir == '':
        rir = None
    else:
        rir = int(rir) if rir else None

    # Automatically mark completed as True since set is updated
    w_set.weight = weight
    w_set.reps = reps
    w_set.rpe = rpe
    w_set.rir = rir
    w_set.completed = True

    db.session.commit()
    flash("Set updated and marked as completed!", "success")
    return redirect(url_for('view_workout', workout_id=workout_id))

@app.route('/workout/<int:workout_id>/finish', methods=['POST'])
@login_required
def finish_workout(workout_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    # Mark workout as completed
    workout.completed = True
    db.session.commit()
    flash("Workout logged successfully!", "success")
    return redirect(url_for('dashboard'))

@app.route('/search_exercises')
def search_exercises():
    query = request.args.get('q', '').lower()
    exercises = Exercise.query.filter(Exercise.name.ilike(f'%{query}%')).all()
    return jsonify([exercise.to_dict() for exercise in exercises])

# --- New Routes ---

@app.route('/profile')
@login_required
def profile():
    # Total workouts
    total_workouts = Workout.query.filter_by(user_id=current_user.id, completed=True).count()
    
    # Workouts in the last 7 days
    one_week_ago = datetime.utcnow() - timedelta(days=7)
    workouts_last_week = Workout.query.filter(
        Workout.user_id == current_user.id,
        Workout.completed == True,
        Workout.date >= one_week_ago
    ).count()

    return render_template('profile.html', 
                           total_workouts=total_workouts,
                           workouts_per_week=workouts_last_week)

@app.route('/history')
@login_required
def history():
    # Retrieve all past workouts for the current user
    past_workouts = Workout.query.filter_by(user_id=current_user.id, completed=True).order_by(Workout.date.desc()).all()
    return render_template('history.html', workouts=past_workouts)

@app.route('/start')
@login_required
def start_workout_page():
    # Similar to dashboard but focused on starting a new workout
    # Show folders and templates for quick selection
    folders = Folder.query.filter_by(user_id=current_user.id).all()
    return render_template('dashboard.html', folders=folders)

#stats is very hard to program
@app.route('/stats')
@login_required
def stats():
    # Get all unique exercises the user has performed
    exercises_performed = db.session.query(Exercise)\
        .join(WorkoutSet)\
        .join(Workout)\
        .filter(Workout.user_id == current_user.id)\
        .distinct()\
        .all()
    
    exercise_stats = {}
    for exercise in exercises_performed:
        # Get all workouts with this exercise
        workouts = db.session.query(Workout)\
            .join(WorkoutSet)\
            .filter(
                Workout.user_id == current_user.id,
                WorkoutSet.exercise_id == exercise.id,
                WorkoutSet.completed == True,
                WorkoutSet.weight.isnot(None),
                WorkoutSet.reps.isnot(None)
            )\
            .distinct()\
            .order_by(Workout.date)\
            .all()
        
        data_points = []
        for workout in workouts:
            # Get all sets for this exercise in this workout
            sets = WorkoutSet.query.filter(
                WorkoutSet.workout_id == workout.id,
                WorkoutSet.exercise_id == exercise.id,
                WorkoutSet.completed == True,
                WorkoutSet.weight.isnot(None),
                WorkoutSet.reps.isnot(None)
            ).all()
            
            # Find the set with highest calculated 1RM
            max_e1rm = 0
            best_set = None
            
            for set in sets:
                # Calculate e1RM based on RPE when available
                if set.rpe is not None:
                    e1rm = set.weight * (1 + set.reps/30) * (set.rpe/10)
                else:
                    e1rm = set.weight * (1 + set.reps/30)
                
                if e1rm > max_e1rm:
                    max_e1rm = e1rm
                    best_set = set
            
            if best_set:  # Only add if we found a valid set
                data_points.append({
                    'date': workout.date.strftime('%Y-%m-%d'),
                    'one_rm': round(max_e1rm, 2),
                    'weight': best_set.weight,
                    'reps': best_set.reps,
                    'rpe': best_set.rpe
                })
        
        if data_points:  # Only add exercises with actual data
            exercise_stats[exercise.name] = data_points
    
    return render_template('stats.html', exercise_stats=exercise_stats)
