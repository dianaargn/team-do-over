# import libraries and modules:
# flask for web app
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
# SQLAlchemy for database interactions
from flask_sqlalchemy import SQLAlchemy
# flask_login for managing sessions
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
# werkzeug.security for password hashing
from werkzeug.security import generate_password_hash, check_password_hash
# datetime for timestamping workouts
from datetime import datetime
# os for environment and path operations
import os

# create app instance
app = Flask(__name__)

# set app configuration
# app.config for database URI
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///workouts.db'
# app.config for track modifications (set False)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# app.config for secret key
app.config['SECRET_KEY'] = 'your-secret-key-here'

# initialize database
db = SQLAlchemy(app)

# initialize login manager
login_manager = LoginManager(app)
# set login_manager.login_view to 'login' so users are redirected if not logged in
login_manager.login_view = 'login'

# User model
class User(UserMixin, db.Model):
    # attributes: id, username, email, password_hash
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))

    # relationships to Folder, Workout
    folders = db.relationship('Folder', backref='user', lazy=True)
    workouts = db.relationship('Workout', backref='user', lazy=True)

    # methods: set and check password
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

# Folder model
class Folder(db.Model):
    # attributes: id, name, user_id
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    # relationship to templates
    # Renamed 'exercises' to 'templates' since this relates to WorkoutTemplate
    templates = db.relationship('WorkoutTemplate', backref='folder', lazy=True)

# Template model
class WorkoutTemplate(db.Model):
    # attributes: id, name, folder_id
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    folder_id = db.Column(db.Integer, db.ForeignKey('folder.id'), nullable=False)

    # relationship to TemplateExercise
    exercises = db.relationship('TemplateExercise', backref='template', lazy=True)

# TemplateExercise model
class TemplateExercise(db.Model):
    # attributes: id, template_id, exercise_id, sets, reps, weight, rpe, rir, notes
    id = db.Column(db.Integer, primary_key=True)
    template_id = db.Column(db.Integer, db.ForeignKey('workout_template.id'), nullable=False)
    exercise_id = db.Column(db.Integer, db.ForeignKey('exercise.id'), nullable=False)
    sets = db.Column(db.Integer, nullable=False)
    reps = db.Column(db.String(50), nullable=True)  # can be None if needed
    weight = db.Column(db.Float, nullable=True)     # can be None if needed
    rpe = db.Column(db.Float, nullable=True)
    rir = db.Column(db.Integer, nullable=True)
    notes = db.Column(db.String(200), nullable=True)

    # relationship to exercise
    exercise = db.relationship('Exercise')

# Workout model
class Workout(db.Model):
    # attributes: id, user_id, template_id, date, name, notes, completed
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    template_id = db.Column(db.Integer, db.ForeignKey('workout_template.id'), nullable=False)
    date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    name = db.Column(db.String(100))
    notes = db.Column(db.String(500))
    completed = db.Column(db.Boolean, default=False)

    # relationship to sets
    sets = db.relationship('WorkoutSet', backref='workout', lazy=True)

# WorkoutSet model
class WorkoutSet(db.Model):
    # attributes: id, workout_id, exercise_id, weight, reps, rpe, rir, notes, completed
    id = db.Column(db.Integer, primary_key=True)
    workout_id = db.Column(db.Integer, db.ForeignKey('workout.id'), nullable=False)
    exercise_id = db.Column(db.Integer, db.ForeignKey('exercise.id'), nullable=False)
    weight = db.Column(db.Float)
    reps = db.Column(db.Integer)
    rpe = db.Column(db.Float)
    rir = db.Column(db.Integer)
    notes = db.Column(db.String(200))
    completed = db.Column(db.Boolean, default=False)

    # relationship to exercise
    exercise = db.relationship('Exercise', backref='sets')

# Exercise model
class Exercise(db.Model):
    # attributes: id, name, category, equipment
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    category = db.Column(db.String(50), nullable=False)
    equipment = db.Column(db.String(50))

    # method: to_dict()
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'category': self.category,
            'equipment': self.equipment
        }

@login_manager.user_loader
def load_user(user_id):
    # returns User by id
    return User.query.get(int(user_id))
    
@app.route('/')
def root():
    if current_user.is_authenticated:
        return redirect(url_for('profile'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and user.check_password(request.form['password']):
            login_user(user)
            return redirect(url_for('profile'))
        flash('Invalid username or password')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        user = User(
            username=request.form['username'],
            email=request.form['email']
        )
        user.set_password(request.form['password'])
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/dashboard')
@login_required
def dashboard():
    folders = Folder.query.filter_by(user_id=current_user.id).all()
    recent_workouts = Workout.query.filter_by(user_id=current_user.id).order_by(Workout.date.desc()).limit(5).all()
    return render_template('dashboard.html', folders=folders, recent_workouts=recent_workouts)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/folder/<int:folder_id>')
@login_required
def view_folder(folder_id):
    folder = Folder.query.get_or_404(folder_id)
    if folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))
    return render_template('folder.html', folder=folder)

@app.route('/folder/create', methods=['POST'])
@login_required
def create_folder():
    folder = Folder(
        name=request.form['name'],
        user_id=current_user.id
    )
    db.session.add(folder)
    db.session.commit()
    flash('Folder created successfully', 'success')
    return redirect(url_for('dashboard'))

@app.route('/template/create/<int:folder_id>', methods=['GET', 'POST'])
@login_required
def create_template(folder_id):
    folder = Folder.query.get_or_404(folder_id)
    if folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    if request.method == 'POST':
        try:
            template_name = request.form.get('name')
            if not template_name:
                flash('Template name is required', 'error')
                return redirect(url_for('view_folder', folder_id=folder_id))

            template = WorkoutTemplate(
                name=template_name,
                folder_id=folder_id
            )
            db.session.add(template)
            db.session.commit()
            flash('Template created successfully', 'success')
            return redirect(url_for('view_folder', folder_id=folder_id))
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating template: {str(e)}', 'error')
            return redirect(url_for('view_folder', folder_id=folder_id))
    else:
        return redirect(url_for('view_folder', folder_id=folder_id))

@app.route('/template/<int:template_id>/edit')
@login_required
def edit_template(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))
    exercises = Exercise.query.order_by(Exercise.category, Exercise.name).all()
    return render_template('edit_template.html', template=template, exercises=exercises)

@app.route('/template/exercise/add/<int:template_id>', methods=['POST'])
@login_required
def add_template_exercise(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    exercise_id = request.form.get('exercise_id')
    sets = request.form.get('sets')
    reps = request.form.get('reps')
    weight = request.form.get('weight')
    rpe = request.form.get('rpe')
    rir = request.form.get('rir')
    notes = request.form.get('notes')

    if reps == '':
        reps = None

    if weight == '':
        weight = None
    else:
        weight = float(weight) if weight else None

    if rpe == '':
        rpe = None
    else:
        rpe = float(rpe) if rpe else None

    if rir == '':
        rir = None
    else:
        rir = int(rir) if rir else None

    sets = int(sets)

    exercise = TemplateExercise(
        template_id=template_id,
        exercise_id=int(exercise_id),
        sets=sets,
        reps=reps,
        weight=weight,
        rpe=rpe,
        rir=rir,
        notes=notes
    )

    db.session.add(exercise)
    db.session.commit()
    flash('Exercise added to template', 'success')
    return redirect(url_for('edit_template', template_id=template_id))

@app.route('/template/exercise/delete/<int:template_id>/<int:exercise_id>', methods=['POST'])
@login_required
def delete_template_exercise(template_id, exercise_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        return redirect(url_for('dashboard'))

    exercise = TemplateExercise.query.get_or_404(exercise_id)
    db.session.delete(exercise)
    db.session.commit()
    flash('Exercise removed from template', 'success')
    return redirect(url_for('edit_template', template_id=template_id))

@app.route('/template/<int:template_id>/start', methods=['POST', 'GET'])
@login_required
def start_workout(template_id):
    template = WorkoutTemplate.query.get_or_404(template_id)
    if template.folder.user_id != current_user.id:
        flash("You don't have access to this template.", 'error')
        return redirect(url_for('dashboard'))

    # Create a new workout from the template
    new_workout = Workout(
        user_id=current_user.id,
        template_id=template_id,
        date=datetime.utcnow(),
        name=template.name,
        notes=None
    )
    db.session.add(new_workout)
    db.session.commit()

    # Create WorkoutSet entries from the template exercises
    for ex in template.exercises:
        for i in range(ex.sets):
            new_set = WorkoutSet(
                workout_id=new_workout.id,
                exercise_id=ex.exercise_id,
                weight=ex.weight,
                rpe=ex.rpe,
                rir=ex.rir,
                notes=f"Suggested: {ex.reps}" if ex.reps else None,
                completed=False
            )
            db.session.add(new_set)

    db.session.commit()

    flash('Workout started from template!', 'success')
    return redirect(url_for('view_workout', workout_id=new_workout.id))

@app.route('/workout/<int:workout_id>')
@login_required
def view_workout(workout_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    return render_template('view_workout.html', workout=workout)

@app.route('/workout/<int:workout_id>/set/<int:set_id>/update', methods=['POST'])
@login_required
def update_set(workout_id, set_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    w_set = WorkoutSet.query.get_or_404(set_id)
    if w_set.workout_id != workout_id:
        flash("Invalid set for this workout.", 'error')
        return redirect(url_for('view_workout', workout_id=workout_id))

    weight = request.form.get('weight')
    reps = request.form.get('reps')
    rpe = request.form.get('rpe')
    rir = request.form.get('rir')

    if weight == '':
        weight = None
    else:
        weight = float(weight) if weight else None

    if reps == '' or reps is None:
        reps = 0
    else:
        reps = int(reps)

    if rpe == '':
        rpe = None
    else:
        rpe = float(rpe) if rpe else None

    if rir == '':
        rir = None
    else:
        rir = int(rir) if rir else None

    # Automatically mark completed as True since set is updated
    w_set.weight = weight
    w_set.reps = reps
    w_set.rpe = rpe
    w_set.rir = rir
    w_set.completed = True

    db.session.commit()
    flash("Set updated and marked as completed!", "success")
    return redirect(url_for('view_workout', workout_id=workout_id))

@app.route('/workout/<int:workout_id>/finish', methods=['POST'])
@login_required
def finish_workout(workout_id):
    workout = Workout.query.get_or_404(workout_id)
    if workout.user_id != current_user.id:
        flash("You don't have access to this workout.", 'error')
        return redirect(url_for('dashboard'))

    # Mark workout as completed
    workout.completed = True
    db.session.commit()
    flash("Workout logged successfully!", "success")
    return redirect(url_for('dashboard'))

@app.route('/search_exercises')
def search_exercises():
    query = request.args.get('q', '').lower()
    exercises = Exercise.query.filter(Exercise.name.ilike(f'%{query}%')).all()
    return jsonify([exercise.to_dict() for exercise in exercises])

# --- New Routes ---

@app.route('/profile')
@login_required
def profile():
    # Total workouts
    total_workouts = Workout.query.filter_by(user_id=current_user.id, completed=True).count()
    
    # Workouts in the last 7 days
    one_week_ago = datetime.utcnow() - timedelta(days=7)
    workouts_last_week = Workout.query.filter(
        Workout.user_id == current_user.id,
        Workout.completed == True,
        Workout.date >= one_week_ago
    ).count()

    return render_template('profile.html', 
                           total_workouts=total_workouts,
                           workouts_per_week=workouts_last_week)

@app.route('/history')
@login_required
def history():
    # Retrieve all past workouts for the current user
    past_workouts = Workout.query.filter_by(user_id=current_user.id, completed=True).order_by(Workout.date.desc()).all()
    return render_template('history.html', workouts=past_workouts)

@app.route('/start')
@login_required
def start_workout_page():
    # Similar to dashboard but focused on starting a new workout
    # Show folders and templates for quick selection
    folders = Folder.query.filter_by(user_id=current_user.id).all()
    return render_template('start_workout.html', folders=folders)

#stats is very hard to program

def init_db():
    #create tables if they don't exist
    with app.app_context():
        db.create_all()
        if Exercise.query.count() == 0:
            exercises_data = [
                # Chest
                ('Assisted Dip', 'Chest', 'Assisted'),
                ('Band-Assisted Bench Press', 'Chest', 'Band'),
                ('Bar Dip', 'Chest', 'Bodyweight'),
                ('Bench Press', 'Chest', 'Barbell'),
                ('Bench Press Against Band', 'Chest', 'Barbell/Band'),
                ('Board Press', 'Chest', 'Barbell'),
                ('Cable Chest Press', 'Chest', 'Cable'),
                ('Close-Grip Bench Press', 'Chest', 'Barbell'),
                ('Close-Grip Feet-Up Bench Press', 'Chest', 'Barbell'),
                ('Decline Bench Press', 'Chest', 'Barbell'),
                ('Decline Push-Up', 'Chest', 'Bodyweight'),
                ('Dumbbell Chest Fly', 'Chest', 'Dumbbell'),
                ('Dumbbell Chest Press', 'Chest', 'Dumbbell'),
                ('Dumbbell Decline Chest Press', 'Chest', 'Dumbbell'),
                ('Dumbbell Floor Press', 'Chest', 'Dumbbell'),
                ('Dumbbell Pullover', 'Chest', 'Dumbbell'),
                ('Feet-Up Bench Press', 'Chest', 'Barbell'),
                ('Floor Press', 'Chest', 'Barbell'),
                ('Incline Bench Press', 'Chest', 'Barbell'),
                ('Incline Dumbbell Press', 'Chest', 'Dumbbell'),
                ('Incline Push-Up', 'Chest', 'Bodyweight'),
                ('Kettlebell Floor Press', 'Chest', 'Kettlebell'),
                ('Kneeling Incline Push-Up', 'Chest', 'Bodyweight'),
                ('Kneeling Push-Up', 'Chest', 'Bodyweight'),
                ('Machine Chest Fly', 'Chest', 'Machine'),
                ('Machine Chest Press', 'Chest', 'Machine'),
                ('Pec Deck', 'Chest', 'Machine'),
                ('Pin Bench Press', 'Chest', 'Barbell'),
                ('Push-Up', 'Chest', 'Bodyweight'),
                ('Push-Up Against Wall', 'Chest', 'Bodyweight'),
                ('Push-Ups With Feet in Rings', 'Chest', 'Rings'),
                ('Resistance Band Chest Fly', 'Chest', 'Band'),
                ('Ring Dip', 'Chest', 'Rings'),
                ('Smith Machine Bench Press', 'Chest', 'Smith Machine'),
                ('Smith Machine Incline Bench Press', 'Chest', 'Smith Machine'),
                ('Smith Machine Reverse Grip Bench Press', 'Chest', 'Smith Machine'),
                ('Standing Cable Chest Fly', 'Chest', 'Cable'),
                ('Standing Resistance Band Chest Fly', 'Chest', 'Band'),
                
                # Shoulders
                ('Arnold Press', 'Shoulders', 'Dumbbell'),
                ('Band External Shoulder Rotation', 'Shoulders', 'Band'),
                ('Band Internal Shoulder Rotation', 'Shoulders', 'Band'),
                ('Band Pull-Apart', 'Shoulders', 'Band'),
                ('Barbell Front Raise', 'Shoulders', 'Barbell'),
                ('Barbell Rear Delt Row', 'Shoulders', 'Barbell'),
                ('Barbell Upright Row', 'Shoulders', 'Barbell'),
                ('Behind the Neck Press', 'Shoulders', 'Barbell'),
                ('Cable Lateral Raise', 'Shoulders', 'Cable'),
                ('Cable Rear Delt Row', 'Shoulders', 'Cable'),
                ('Cuban Press', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Front Raise', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Horizontal Internal Shoulder Rotation', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Horizontal External Shoulder Rotation', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Lateral Raise', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Rear Delt Row', 'Shoulders', 'Dumbbell'),
                ('Dumbbell Shoulder Press', 'Shoulders', 'Dumbbell'),
                ('Face Pull', 'Shoulders', 'Cable'),
                ('Front Hold', 'Shoulders', 'Plate/Dumbbell'),
                ('Landmine Press', 'Shoulders', 'Landmine'),
                ('Lying Dumbbell External Shoulder Rotation', 'Shoulders', 'Dumbbell'),
                ('Lying Dumbbell Internal Shoulder Rotation', 'Shoulders', 'Dumbbell'),
                ('Machine Lateral Raise', 'Shoulders', 'Machine'),
                ('Machine Shoulder Press', 'Shoulders', 'Machine'),
                ('Monkey Row', 'Shoulders', 'Dumbbell'),
                ('Overhead Press', 'Shoulders', 'Barbell'),
                ('Plate Front Raise', 'Shoulders', 'Plate'),
                ('Power Jerk', 'Shoulders', 'Barbell'),
                ('Push Press', 'Shoulders', 'Barbell'),
                ('Reverse Cable Flyes', 'Shoulders', 'Cable'),
                ('Reverse Dumbbell Flyes', 'Shoulders', 'Dumbbell'),
                ('Reverse Machine Fly', 'Shoulders', 'Machine'),
                ('Seated Dumbbell Shoulder Press', 'Shoulders', 'Dumbbell'),
                ('Seated Barbell Overhead Press', 'Shoulders', 'Barbell'),
                ('Seated Smith Machine Shoulder Press', 'Shoulders', 'Smith Machine'),
                ('Snatch Grip Behind the Neck Press', 'Shoulders', 'Barbell'),
                ('Squat Jerk', 'Shoulders', 'Barbell'),
                ('Split Jerk', 'Shoulders', 'Barbell'),

                # Biceps
                ('Barbell Curl', 'Arms', 'Barbell'),
                ('Barbell Preacher Curl', 'Arms', 'Barbell'),
                ('Bayesian Curl', 'Arms', 'Cable'),
                ('Bodyweight Curl', 'Arms', 'Bodyweight'),
                ('Cable Crossover Bicep Curl', 'Arms', 'Cable'),
                ('Cable Curl With Bar', 'Arms', 'Cable'),
                ('Cable Curl With Rope', 'Arms', 'Cable'),
                ('Concentration Curl', 'Arms', 'Dumbbell'),
                ('Drag Curl', 'Arms', 'Barbell'),
                ('Dumbbell Curl', 'Arms', 'Dumbbell'),
                ('Dumbbell Preacher Curl', 'Arms', 'Dumbbell'),
                ('Hammer Curl', 'Arms', 'Dumbbell'),
                ('Incline Dumbbell Curl', 'Arms', 'Dumbbell'),
                ('Machine Bicep Curl', 'Arms', 'Machine'),
                ('Resistance Band Curl', 'Arms', 'Band'),
                ('Spider Curl', 'Arms', 'Barbell/Dumbbell'),

                # Triceps
                ('Barbell Standing Triceps Extension', 'Arms', 'Barbell'),
                ('Barbell Lying Triceps Extension', 'Arms', 'Barbell'),
                ('Bench Dip', 'Arms', 'Bodyweight'),
                ('Crossbody Cable Triceps Extension', 'Arms', 'Cable'),
                ('Close-Grip Push-Up', 'Arms', 'Bodyweight'),
                ('Dumbbell Lying Triceps Extension', 'Arms', 'Dumbbell'),
                ('Dumbbell Standing Triceps Extension', 'Arms', 'Dumbbell'),
                ('Overhead Cable Triceps Extension', 'Arms', 'Cable'),
                ('Tricep Bodyweight Extension', 'Arms', 'Bodyweight'),
                ('Tricep Pushdown With Bar', 'Arms', 'Cable'),
                ('Tricep Pushdown With Rope', 'Arms', 'Cable'),

                # Legs
                ('Air Squat', 'Legs', 'Bodyweight'),
                ('Barbell Hack Squat', 'Legs', 'Barbell'),
                ('Barbell Lunge', 'Legs', 'Barbell'),
                ('Barbell Walking Lunge', 'Legs', 'Barbell'),
                ('Belt Squat', 'Legs', 'Belt Squat Machine'),
                ('Body Weight Lunge', 'Legs', 'Bodyweight'),
                ('Bodyweight Leg Curl', 'Legs', 'Bodyweight'),
                ('Box Jump', 'Legs', 'Bodyweight'),
                ('Box Squat', 'Legs', 'Barbell'),
                ('Bulgarian Split Squat', 'Legs', 'Dumbbell/Barbell'),
                ('Chair Squat', 'Legs', 'Bodyweight'),
                ('Dumbbell Lunge', 'Legs', 'Dumbbell'),
                ('Dumbbell Squat', 'Legs', 'Dumbbell'),
                ('Front Squat', 'Legs', 'Barbell'),
                ('Glute Ham Raise', 'Legs', 'GHR Machine'),
                ('Goblet Squat', 'Legs', 'Dumbbell/Kettlebell'),
                ('Hack Squat Machine', 'Legs', 'Machine'),
                ('Half Air Squat', 'Legs', 'Bodyweight'),
                ('Hip Adduction Machine', 'Legs', 'Machine'),
                ('Jumping Lunge', 'Legs', 'Bodyweight'),
                ('Landmine Hack Squat', 'Legs', 'Landmine'),
                ('Landmine Squat', 'Legs', 'Landmine'),
                ('Leg Curl On Ball', 'Legs', 'Stability Ball'),
                ('Leg Extension', 'Legs', 'Machine'),
                ('Leg Press', 'Legs', 'Machine'),
                ('Lying Leg Curl', 'Legs', 'Machine'),
                ('Nordic Hamstring Eccentric', 'Legs', 'Bodyweight'),
                ('Pause Squat', 'Legs', 'Barbell'),
                ('Pistol Squat', 'Legs', 'Bodyweight'),
                ('Reverse Barbell Lunge', 'Legs', 'Barbell'),
                ('Romanian Deadlift', 'Legs', 'Barbell'),
                ('Safety Bar Squat', 'Legs', 'Safety Bar'),
                ('Seated Leg Curl', 'Legs', 'Machine'),
                ('Shallow Body Weight Lunge', 'Legs', 'Bodyweight'),
                ('Side Lunges (Bodyweight)', 'Legs', 'Bodyweight'),
                ('Smith Machine Bulgarian Split Squat', 'Legs', 'Smith Machine'),
                ('Smith Machine Front Squat', 'Legs', 'Smith Machine'),
                ('Smith Machine Squat', 'Legs', 'Smith Machine'),
                ('Squat', 'Legs', 'Barbell'),
                ('Step Up', 'Legs', 'Bodyweight/Dumbbell'),
                ('Zercher Squat', 'Legs', 'Barbell'),
                ('Zombie Squat', 'Legs', 'Barbell'),

                # Back
                ('Assisted Chin-Up', 'Back', 'Assisted'),
                ('Assisted Pull-Up', 'Back', 'Assisted'),
                ('Back Extension', 'Back', 'Bodyweight/Machine'),
                ('Banded Muscle-Up', 'Back', 'Band/Rings/Bar'),
                ('Barbell Row', 'Back', 'Barbell'),
                ('Barbell Shrug', 'Back', 'Barbell'),
                ('Block Clean', 'Back', 'Barbell'),
                ('Block Snatch', 'Back', 'Barbell'),
                ('Cable Close Grip Seated Row', 'Back', 'Cable'),
                ('Cable Wide Grip Seated Row', 'Back', 'Cable'),
                ('Chest to Bar', 'Back', 'Bar'),
                ('Chin-Up', 'Back', 'Bodyweight'),
                ('Clean', 'Back', 'Barbell'),
                ('Clean and Jerk', 'Back', 'Barbell'),
                ('Deadlift', 'Back', 'Barbell'),
                ('Deficit Deadlift', 'Back', 'Barbell'),
                ('Dumbbell Deadlift', 'Back', 'Dumbbell'),
                ('Dumbbell Row', 'Back', 'Dumbbell'),
                ('Dumbbell Shrug', 'Back', 'Dumbbell'),
                ('Floor Back Extension', 'Back', 'Bodyweight'),
                ('Good Morning', 'Back', 'Barbell'),
                ('Gorilla Row', 'Back', 'Dumbbell/Kettlebell'),
                ('Hang Clean', 'Back', 'Barbell'),
                ('Hang Power Clean', 'Back', 'Barbell'),
                ('Hang Power Snatch', 'Back', 'Barbell'),
                ('Hang Snatch', 'Back', 'Barbell'),
                ('Inverted Row', 'Back', 'Bodyweight'),
                ('Inverted Row with Underhand Grip', 'Back', 'Bodyweight'),
                ('Jefferson Curl', 'Back', 'Barbell'),
                ('Jumping Muscle-Up', 'Back', 'Bodyweight'),
                ('Kettlebell Swing', 'Back', 'Kettlebell'),
                ('Lat Pulldown With Pronated Grip', 'Back', 'Cable'),
                ('Lat Pulldown With Supinated Grip', 'Back', 'Cable'),
                ('Muscle-Up (Bar)', 'Back', 'Bar'),
                ('Muscle-Up (Rings)', 'Back', 'Rings'),
                ('One-Handed Cable Row', 'Back', 'Cable'),
                ('One-Handed Lat Pulldown', 'Back', 'Cable'),
                ('Pause Deadlift', 'Back', 'Barbell'),
                ('Pendlay Row', 'Back', 'Barbell'),
                ('Power Clean', 'Back', 'Barbell'),
                ('Power Snatch', 'Back', 'Barbell'),
                ('Pull-Up', 'Back', 'Bodyweight'),
                ('Pull-Up With a Neutral Grip', 'Back', 'Bodyweight'),
                ('Rack Pull', 'Back', 'Barbell'),
                ('Ring Pull-Up', 'Back', 'Rings'),
                ('Ring Row', 'Back', 'Rings'),
                ('Scap Pull-Up', 'Back', 'Bodyweight'),
                ('Seal Row', 'Back', 'Bench/Barbell'),
                ('Seated Machine Row', 'Back', 'Machine'),
                ('Single Leg Deadlift with Kettlebell', 'Back', 'Kettlebell'),
                ('Smith Machine One-Handed Row', 'Back', 'Smith Machine'),
                ('Snatch', 'Back', 'Barbell'),
                ('Snatch Grip Deadlift', 'Back', 'Barbell'),
                ('Stiff-Legged Deadlift', 'Back', 'Barbell'),
                ('Straight Arm Lat Pulldown', 'Back', 'Cable'),
                ('Sumo Deadlift', 'Back', 'Barbell'),
                ('T-Bar Row', 'Back', 'T-Bar'),
                ('Trap Bar Deadlift With High Handles', 'Back', 'Trap Bar'),
                ('Trap Bar Deadlift With Low Handles', 'Back', 'Trap Bar'),

                # Glutes
                ('Banded Side Kicks', 'Glutes', 'Band'),
                ('Cable Pull Through', 'Glutes', 'Cable'),
                ('Clamshells', 'Glutes', 'Bodyweight/Band'),
                ('Cossack Squat', 'Glutes', 'Bodyweight/Kettlebell'),
                ('Death March with Dumbbells', 'Glutes', 'Dumbbell'),
                ('Donkey Kicks', 'Glutes', 'Bodyweight'),
                ('Dumbbell Romanian Deadlift', 'Glutes', 'Dumbbell'),
                ('Dumbbell Frog Pumps', 'Glutes', 'Dumbbell'),
                ('Fire Hydrants', 'Glutes', 'Bodyweight'),
                ('Frog Pumps', 'Glutes', 'Bodyweight'),
                ('Glute Bridge', 'Glutes', 'Bodyweight/Barbell'),
                ('Hip Abduction Against Band', 'Glutes', 'Band'),
                ('Hip Abduction Machine', 'Glutes', 'Machine'),
                ('Hip Thrust', 'Glutes', 'Barbell'),
                ('Hip Thrust Machine', 'Glutes', 'Machine'),
                ('Hip Thrust With Band Around Knees', 'Glutes', 'Band/Barbell'),
                ('Lateral Walk With Band', 'Glutes', 'Band'),
                ('Machine Glute Kickbacks', 'Glutes', 'Machine'),
                ('One-Legged Glute Bridge', 'Glutes', 'Bodyweight'),
                ('One-Legged Hip Thrust', 'Glutes', 'Bodyweight'),
                ('Reverse Hyperextension', 'Glutes', 'Machine'),
                ('Romanian Deadlift', 'Glutes', 'Barbell'),
                ('Single Leg Romanian Deadlift', 'Glutes', 'Dumbbell/Kettlebell'),
                ('Standing Glute Kickback in Machine', 'Glutes', 'Machine'),
                ('Step Up', 'Glutes', 'Bodyweight/Dumbbell'),

                # Abs
                ('Ball Slams', 'Core', 'Medicine Ball'),
                ('Cable Crunch', 'Core', 'Cable'),
                ('Crunch', 'Core', 'Bodyweight'),
                ('Dead Bug', 'Core', 'Bodyweight'),
                ('Dragon Flag', 'Core', 'Bodyweight'),
                ('Hanging Knee Raise', 'Core', 'Bodyweight'),
                ('Hanging Leg Raise', 'Core', 'Bodyweight'),
                ('Hanging Sit-Up', 'Core', 'Bodyweight'),
                ('Hanging Windshield Wiper', 'Core', 'Bodyweight'),
                ('High to Low Wood Chop with Band', 'Core', 'Band'),
                ('Horizontal Wood Chop with Band', 'Core', 'Band'),
                ('Jackknife Sit-Up', 'Core', 'Bodyweight'),
                ('Kneeling Ab Wheel Roll-Out', 'Core', 'Ab Wheel'),
                ('Kneeling Plank', 'Core', 'Bodyweight'),
                ('Kneeling Side Plank', 'Core', 'Bodyweight'),
                ('Lying Leg Raise', 'Core', 'Bodyweight'),
                ('Lying Windshield Wiper', 'Core', 'Bodyweight'),
                ('Lying Windshield Wiper with Bent Knees', 'Core', 'Bodyweight'),
                ('Machine Crunch', 'Core', 'Machine'),
                ('Mountain Climbers', 'Core', 'Bodyweight'),
                ('Oblique Crunch', 'Core', 'Bodyweight'),
                ('Oblique Sit-Up', 'Core', 'Bodyweight'),
                ('Plank', 'Core', 'Bodyweight'),
                ('Plank with Leg Lifts', 'Core', 'Bodyweight'),
                ('Russian Twist', 'Core', 'Bodyweight'),
                ('Side Plank', 'Core', 'Bodyweight'),
                ('Sit-Up', 'Core', 'Bodyweight'),

                # Calves
                ('Barbell Standing Calf Raise', 'Calves', 'Barbell'),
                ('Donkey Calf Raise', 'Calves', 'Bodyweight/Machine'),
                ('Eccentric Heel Drop', 'Calves', 'Bodyweight'),
                ('Heel Raise', 'Calves', 'Bodyweight'),
                ('Seated Calf Raise', 'Calves', 'Machine'),
                ('Standing Calf Raise', 'Calves', 'Bodyweight/Machine'),

                # Forearm Flexors & Grip
                ('Barbell Wrist Curl', 'Forearms', 'Barbell'),
                ('Barbell Wrist Curl Behind the Back', 'Forearms', 'Barbell'),
                ('Bar Hang', 'Forearms', 'Bodyweight'),
                ('Dumbbell Wrist Curl', 'Forearms', 'Dumbbell'),
                ('Farmers Walk', 'Forearms', 'Dumbbell/Kettlebell'),
                ('Fat Bar Deadlift', 'Forearms', 'Fat Bar'),
                ('Gripper', 'Forearms', 'Hand Gripper'),
                ('One-Handed Bar Hang', 'Forearms', 'Bodyweight'),
                ('Plate Pinch', 'Forearms', 'Plates'),
                ('Plate Wrist Curl', 'Forearms', 'Plates'),
                ('Towel Pull-Up', 'Forearms', 'Bodyweight/Towel'),
                ('Wrist Roller', 'Forearms', 'Wrist Roller'),

                # Forearm Extensors
                ('Barbell Wrist Extension', 'Forearms', 'Barbell'),
                ('Dumbbell Wrist Extension', 'Forearms', 'Dumbbell')
            ]
    for name, category, equipment in exercises_data:
        exercise=Exercise(name=name, catregoty=category, quipment=equipment)
        db.session.add(exercise)
    db.session.commit()

    # default user
    default_user = User.query.filter_by(username='default_user').first()
    if not default_user:
        default_user = User(username='default_user', email='default@example.com')
        default_user.set_password('defaultpassword')
        db.session.add(default_user)
        db.session.commit()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
